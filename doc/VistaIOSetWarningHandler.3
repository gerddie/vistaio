.ds Vn 2.1
.TH VSetWarningHandler 3Vi "16 February 1994" "Vista Version \*(Vn"
.SH NAME
VSetWarningHandler \- register a procedure to be called on any nonfatal error
.SH SYNOPSIS
.nf
.ft B
void VSetWarningHandler (VWarningHandler *\fIhandler\fP)
.PP
.ft B
typedef void VWarningHandler (VStringConst \fImessage\fP);
.PP
.ft B
void VDefaultWarning (VStringConst \fImessage\fP);
.fi
.SH ARGUMENTS
.IP \fIhandler\fP 10n
Specifies the new nonfatal error handler.
.IP \fImessage\fP 10n
Specifies a null-terminated error message string to be reported. 
.SH DESCRIPTION
\fBVSetWarningHandler\fP registers a procedure, \fIhandler\fP, as the
nonfatal error handler. That procedure is called by \fBVWarning\fP(3Vi) or
by \fBVSystemWarning\fP(3Vi) to report any nonfatal error. When called it
is passed a string, \fImessage\fP, containing a textual description of the
error.
.PP
Only one procedure serves as the nonfatal error handler at any one time.
.PP
Prior to the first call to \fBVSetWarningHandler\fP, the procedure
\fBVDefaultWarning\fP is the nonfatal error handler. This procedure will
write the error message to the standard error stream, then return.
\fBVDefaultWarning\fP can be re-established as the fatal error handler at
any time by calling \fBVSetWarningHandler\fP with a
.SB NULL
argument.
.SH EXAMPLES
To adopt a warning handler that writes messages both to the standard error
stream and to a log file, one might do the following:
.RS
.PP
.nf
.ft B
FILE *log_file;

void MyWarningHandler (message)
	VStringConst message;
{
	fputs (message, stderr);
	fputs (message, log_file);
}

int main (\fR...\fP)
{
	\fR...\fP
	log_file = fopen ("log", "w");
	VSetWarningHandler (MyWarningHandler);
	\fR...\fP
}
.fi
.RE
.SH "SEE ALSO"
.BR VWarning (3Vi),
.BR VSetErrorHandler (3Vi),
.BR Vlib (7Vi)
.SH AUTHOR
Art Pope <pope@cs.ubc.ca>
